package NinthChar;

public class Sort_ex {
    public static void main(String[] args)
    {
//        int[] keys = {32,26,87,72,26,17};                  //图9.1 直接插入排序；图9.3 冒泡排序
//        int[] keys = {39,55,65,97,27,76,27,13,19};         //图9.2 希尔排序，不稳定。改值，运行结果没改
//        int[] keys = {39,39,97,75,61,19,26,49};            //图9.6~7 快速排序，不稳定。改值，运行结果没改
//        int[] keys = {39,97,26,19,38,15};                  //图9.8 直接选择排序，不稳定。改值，运行结果没改
//        int[] keys = {81,49,19,35,97,76,13,27};            //图9.9 最小/大堆，没有重复值
//        int[] keys = {81,76,19,49,97,81,13,35};            //图9.10~11 堆排序，重复值81，不稳定
        int[] keys = {97,82,75,53,17,61,70,12,61,58,26};   //图9.12 归并排序

        //算法分析，已排序（升序），最好情况：直接插入排序、冒泡排序、快速排序，最小堆
//        int[] keys = {1,2,3,4,5,6};//,7,8};
//        int[] keys = {6,5,4,3,2,1};//8,7,
//        int[] keys = {1,3,2,4,5,8,6,7};                    //冒泡排序
//        int[] keys = {4,5,8,1,2,7,3,6};                    //冒泡排序

        //第5版习题解答
//        int[] keys = {93,17,56,42,78,15,42,25,19};         //习题9-2 希尔排序（升序）
//        int[] keys = {65,92,87,25,39,56,46,12,25};         //习题9-5 快速排序（升序）
//        int[] keys = {49,38,65,97,76,13,27,49,9};          //习题9-8 直接选择排序（升序），课件答，说明不稳定
//        int[] keys = {21,61,61,56,75,12,15,49,27};         //习题9-10 最小堆，堆排序，重复值61
//        int[] keys = {12,27,15,49,75,61,21,61,56,90,32};   //实验题9-1 判断最小堆，不是
//          int[] keys = {97,75,53,26,85,32,17,61,75,65,12};   //习题9-11 归并排序


        System.out.print("关键字序列：");
        Array1.print(keys);                      //“{,}”形式，Array1见例1.4

//        Array9.insertSort(keys,true);            //升序
//        Array9.insertSort(keys,false);           //降序
//        Array9.shellSort(keys);                  //升序
//        Array9.bubbleSort(keys);                 //升序
//        Array9.quickSort(keys);                  //升序
//        Array9.selectSort(keys);                 //升序
//        Array9.heapSort(keys);                   //降序，最小堆
//      System.out.println("最小堆？ "+Array9.isMinHeap(keys));
        Array9.mergeSort(keys);                  //升序
    }
}
